name: CI/CD Pipeline

on:
  pull_request:
    branches: [develop, main]
  push:
    branches: main
  pull_request_review:
    types: submitted

jobs:
  unit-tests:
    name: Test on Node
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18, 22]
      # Si un job de la matrice échoue, on continue l'exécution des autres jobs
      # Cela permet d'avoir les résultats des tests
      # sur toutes les versions de Node
      # même si une version échoue
      fail-fast: false
    steps:
      - uses: actions/checkout@va
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"
      - run: npm ci

      - name: Generate coverage report
        run: npm run test:coverage
      - name: Run Test
        id: run-tests
        run: npm run test:ci
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-node-${{ matrix.node }}
          # C'est le dossier qui contient le rapport de couverture de code
          # que l'on veut mettre dans l'artefact
          path: coverage/
          retention-days: 7
      - name: Add test summary
        if: always()
        run: |
          # Rappel: dans outcome, on a le résultat du job
          # success, failure, cancelled, skipped
          # run-tests est l'id du job qui exécute les tests
          if [ "${{ steps.run-tests.outcome }}" == "success" ]; then
            echo "## Test Results - Node ${{ matrix.node }}" >> $GITHUB_STEP_SUMMARY
            echo "✅ Tests completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Test Results - Node ${{ matrix.node }}" >> $GITHUB_STEP_SUMMARY
            echo "❌ Tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "📊 Coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: "npm"
      - run: npm run lint
        continue-on-error: true
      - name: Add lint summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "## Lint Results" >> $GITHUB_STEP_SUMMARY
            echo "✅ Code style checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Lint Results" >> $GITHUB_STEP_SUMMARY
            echo "❌ Code style checks failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests, lint]
    steps:
      - name: Kake build
        run: |
          echo "🚀 Building application in progress..."
          sleep 2
          echo "✅ Build success!"

  deploy-dev:
    name: Deploy to development
    needs: ["build"]
    runs-on: ubuntu-latest
    environment:
      name: develop
      url: ${{ vars.DEPLOY_URL }}
    concurrency:
      group: deploy-dev
      cancel-in-progress: true
      if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'feature/')
      steps:
        - name: Fake deployment
          run: |
            echo "🚀 Deploying to ${{ vars.DEPLOY_URL }}"
            echo "Using deploy token: ${{ secrets.DEPLOY_TOKEN }}"
            echo "✅ Deployed successfully!"

  auto-merge-and-create-release-pr:
    name: Manage Pull Request
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    environment:
      name: develop
      url: ${{ vars.DEPLOY_URL }}
    permissions:
      pull-request: write
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Auto-merge PR feature to develop
        run: gh pr merge --auto --merge "${{ github.event.pull_request.number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR to main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr create --base main --head develop --title "Release to production" --body "Automated PR from develop to main"

  deploy-prod:
    name: Deploy to production"
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ vars.DEPLOY_URL }}
    concurrency:
      group: deploy-prod
      cancel-in-progress: true
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Fake production deployment
        run: |
          echo "🚀 Deploying to production at ${{ vars.DEPLOY_URL }}"
          echo "Using production token: ${{ secrets.DEPLOY_TOKEN }}"
          echo "✅ Production deployment successful!"

      - name: Add deployment summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "## Production Deployment" >> $GITHUB_STEP_SUMMARY
            echo "✅ Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Production Deployment" >> $GITHUB_STEP_SUMMARY
            echo "❌ Production deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
